// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: floyd.proto

#ifndef PROTOBUF_floyd_2eproto__INCLUDED
#define PROTOBUF_floyd_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace floyd {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_floyd_2eproto();
void protobuf_AssignDesc_floyd_2eproto();
void protobuf_ShutdownFile_floyd_2eproto();

class Entry;
class CmdRequest;
class CmdRequest_RequestVote;
class CmdRequest_AppendEntries;
class CmdRequest_KvRequest;
class CmdRequest_LockRequest;
class CmdRequest_ServerStatus;
class CmdResponse;
class CmdResponse_RequestVoteResponse;
class CmdResponse_AppendEntriesResponse;
class CmdResponse_KvResponse;
class CmdResponse_ServerStatus;
class Lock;

enum Entry_OpType {
  Entry_OpType_kRead = 0,
  Entry_OpType_kWrite = 1,
  Entry_OpType_kDelete = 2,
  Entry_OpType_kTryLock = 4,
  Entry_OpType_kUnLock = 5
};
bool Entry_OpType_IsValid(int value);
const Entry_OpType Entry_OpType_OpType_MIN = Entry_OpType_kRead;
const Entry_OpType Entry_OpType_OpType_MAX = Entry_OpType_kUnLock;
const int Entry_OpType_OpType_ARRAYSIZE = Entry_OpType_OpType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Entry_OpType_descriptor();
inline const ::std::string& Entry_OpType_Name(Entry_OpType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Entry_OpType_descriptor(), value);
}
inline bool Entry_OpType_Parse(
    const ::std::string& name, Entry_OpType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Entry_OpType>(
    Entry_OpType_descriptor(), name, value);
}
enum Type {
  kRead = 0,
  kWrite = 1,
  kDelete = 3,
  kTryLock = 5,
  kUnLock = 6,
  kRequestVote = 8,
  kAppendEntries = 9,
  kServerStatus = 10
};
bool Type_IsValid(int value);
const Type Type_MIN = kRead;
const Type Type_MAX = kServerStatus;
const int Type_ARRAYSIZE = Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Type_descriptor();
inline const ::std::string& Type_Name(Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Type_descriptor(), value);
}
inline bool Type_Parse(
    const ::std::string& name, Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Type>(
    Type_descriptor(), name, value);
}
enum StatusCode {
  kOk = 0,
  kNotFound = 1,
  kError = 2,
  kLocked = 3
};
bool StatusCode_IsValid(int value);
const StatusCode StatusCode_MIN = kOk;
const StatusCode StatusCode_MAX = kLocked;
const int StatusCode_ARRAYSIZE = StatusCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* StatusCode_descriptor();
inline const ::std::string& StatusCode_Name(StatusCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    StatusCode_descriptor(), value);
}
inline bool StatusCode_Parse(
    const ::std::string& name, StatusCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StatusCode>(
    StatusCode_descriptor(), name, value);
}
// ===================================================================

class Entry : public ::google::protobuf::Message {
 public:
  Entry();
  virtual ~Entry();

  Entry(const Entry& from);

  inline Entry& operator=(const Entry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Entry& default_instance();

  void Swap(Entry* other);

  // implements Message ----------------------------------------------

  Entry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Entry& from);
  void MergeFrom(const Entry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Entry_OpType OpType;
  static const OpType kRead = Entry_OpType_kRead;
  static const OpType kWrite = Entry_OpType_kWrite;
  static const OpType kDelete = Entry_OpType_kDelete;
  static const OpType kTryLock = Entry_OpType_kTryLock;
  static const OpType kUnLock = Entry_OpType_kUnLock;
  static inline bool OpType_IsValid(int value) {
    return Entry_OpType_IsValid(value);
  }
  static const OpType OpType_MIN =
    Entry_OpType_OpType_MIN;
  static const OpType OpType_MAX =
    Entry_OpType_OpType_MAX;
  static const int OpType_ARRAYSIZE =
    Entry_OpType_OpType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  OpType_descriptor() {
    return Entry_OpType_descriptor();
  }
  static inline const ::std::string& OpType_Name(OpType value) {
    return Entry_OpType_Name(value);
  }
  static inline bool OpType_Parse(const ::std::string& name,
      OpType* value) {
    return Entry_OpType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .floyd.Entry.OpType optype = 1;
  inline bool has_optype() const;
  inline void clear_optype();
  static const int kOptypeFieldNumber = 1;
  inline ::floyd::Entry_OpType optype() const;
  inline void set_optype(::floyd::Entry_OpType value);

  // required uint64 term = 2;
  inline bool has_term() const;
  inline void clear_term();
  static const int kTermFieldNumber = 2;
  inline ::google::protobuf::uint64 term() const;
  inline void set_term(::google::protobuf::uint64 value);

  // required string key = 3;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 3;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // optional bytes value = 4;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 4;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // optional bytes holder = 5;
  inline bool has_holder() const;
  inline void clear_holder();
  static const int kHolderFieldNumber = 5;
  inline const ::std::string& holder() const;
  inline void set_holder(const ::std::string& value);
  inline void set_holder(const char* value);
  inline void set_holder(const void* value, size_t size);
  inline ::std::string* mutable_holder();
  inline ::std::string* release_holder();
  inline void set_allocated_holder(::std::string* holder);

  // optional uint64 lease_end = 6;
  inline bool has_lease_end() const;
  inline void clear_lease_end();
  static const int kLeaseEndFieldNumber = 6;
  inline ::google::protobuf::uint64 lease_end() const;
  inline void set_lease_end(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:floyd.Entry)
 private:
  inline void set_has_optype();
  inline void clear_has_optype();
  inline void set_has_term();
  inline void clear_has_term();
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_holder();
  inline void clear_has_holder();
  inline void set_has_lease_end();
  inline void clear_has_lease_end();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 term_;
  ::std::string* key_;
  ::std::string* value_;
  ::std::string* holder_;
  ::google::protobuf::uint64 lease_end_;
  int optype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_floyd_2eproto();
  friend void protobuf_AssignDesc_floyd_2eproto();
  friend void protobuf_ShutdownFile_floyd_2eproto();

  void InitAsDefaultInstance();
  static Entry* default_instance_;
};
// -------------------------------------------------------------------

class CmdRequest_RequestVote : public ::google::protobuf::Message {
 public:
  CmdRequest_RequestVote();
  virtual ~CmdRequest_RequestVote();

  CmdRequest_RequestVote(const CmdRequest_RequestVote& from);

  inline CmdRequest_RequestVote& operator=(const CmdRequest_RequestVote& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdRequest_RequestVote& default_instance();

  void Swap(CmdRequest_RequestVote* other);

  // implements Message ----------------------------------------------

  CmdRequest_RequestVote* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdRequest_RequestVote& from);
  void MergeFrom(const CmdRequest_RequestVote& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 term = 1;
  inline bool has_term() const;
  inline void clear_term();
  static const int kTermFieldNumber = 1;
  inline ::google::protobuf::uint64 term() const;
  inline void set_term(::google::protobuf::uint64 value);

  // required bytes ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const void* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // required int32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // required uint64 last_log_index = 4;
  inline bool has_last_log_index() const;
  inline void clear_last_log_index();
  static const int kLastLogIndexFieldNumber = 4;
  inline ::google::protobuf::uint64 last_log_index() const;
  inline void set_last_log_index(::google::protobuf::uint64 value);

  // required uint64 last_log_term = 5;
  inline bool has_last_log_term() const;
  inline void clear_last_log_term();
  static const int kLastLogTermFieldNumber = 5;
  inline ::google::protobuf::uint64 last_log_term() const;
  inline void set_last_log_term(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:floyd.CmdRequest.RequestVote)
 private:
  inline void set_has_term();
  inline void clear_has_term();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_last_log_index();
  inline void clear_has_last_log_index();
  inline void set_has_last_log_term();
  inline void clear_has_last_log_term();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 term_;
  ::std::string* ip_;
  ::google::protobuf::uint64 last_log_index_;
  ::google::protobuf::uint64 last_log_term_;
  ::google::protobuf::int32 port_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_floyd_2eproto();
  friend void protobuf_AssignDesc_floyd_2eproto();
  friend void protobuf_ShutdownFile_floyd_2eproto();

  void InitAsDefaultInstance();
  static CmdRequest_RequestVote* default_instance_;
};
// -------------------------------------------------------------------

class CmdRequest_AppendEntries : public ::google::protobuf::Message {
 public:
  CmdRequest_AppendEntries();
  virtual ~CmdRequest_AppendEntries();

  CmdRequest_AppendEntries(const CmdRequest_AppendEntries& from);

  inline CmdRequest_AppendEntries& operator=(const CmdRequest_AppendEntries& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdRequest_AppendEntries& default_instance();

  void Swap(CmdRequest_AppendEntries* other);

  // implements Message ----------------------------------------------

  CmdRequest_AppendEntries* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdRequest_AppendEntries& from);
  void MergeFrom(const CmdRequest_AppendEntries& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 term = 1;
  inline bool has_term() const;
  inline void clear_term();
  static const int kTermFieldNumber = 1;
  inline ::google::protobuf::uint64 term() const;
  inline void set_term(::google::protobuf::uint64 value);

  // required bytes ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const void* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // required int32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // required uint64 prev_log_index = 4;
  inline bool has_prev_log_index() const;
  inline void clear_prev_log_index();
  static const int kPrevLogIndexFieldNumber = 4;
  inline ::google::protobuf::uint64 prev_log_index() const;
  inline void set_prev_log_index(::google::protobuf::uint64 value);

  // required uint64 prev_log_term = 5;
  inline bool has_prev_log_term() const;
  inline void clear_prev_log_term();
  static const int kPrevLogTermFieldNumber = 5;
  inline ::google::protobuf::uint64 prev_log_term() const;
  inline void set_prev_log_term(::google::protobuf::uint64 value);

  // required uint64 leader_commit = 6;
  inline bool has_leader_commit() const;
  inline void clear_leader_commit();
  static const int kLeaderCommitFieldNumber = 6;
  inline ::google::protobuf::uint64 leader_commit() const;
  inline void set_leader_commit(::google::protobuf::uint64 value);

  // repeated .floyd.Entry entries = 7;
  inline int entries_size() const;
  inline void clear_entries();
  static const int kEntriesFieldNumber = 7;
  inline const ::floyd::Entry& entries(int index) const;
  inline ::floyd::Entry* mutable_entries(int index);
  inline ::floyd::Entry* add_entries();
  inline const ::google::protobuf::RepeatedPtrField< ::floyd::Entry >&
      entries() const;
  inline ::google::protobuf::RepeatedPtrField< ::floyd::Entry >*
      mutable_entries();

  // @@protoc_insertion_point(class_scope:floyd.CmdRequest.AppendEntries)
 private:
  inline void set_has_term();
  inline void clear_has_term();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_prev_log_index();
  inline void clear_has_prev_log_index();
  inline void set_has_prev_log_term();
  inline void clear_has_prev_log_term();
  inline void set_has_leader_commit();
  inline void clear_has_leader_commit();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 term_;
  ::std::string* ip_;
  ::google::protobuf::uint64 prev_log_index_;
  ::google::protobuf::uint64 prev_log_term_;
  ::google::protobuf::uint64 leader_commit_;
  ::google::protobuf::RepeatedPtrField< ::floyd::Entry > entries_;
  ::google::protobuf::int32 port_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_floyd_2eproto();
  friend void protobuf_AssignDesc_floyd_2eproto();
  friend void protobuf_ShutdownFile_floyd_2eproto();

  void InitAsDefaultInstance();
  static CmdRequest_AppendEntries* default_instance_;
};
// -------------------------------------------------------------------

class CmdRequest_KvRequest : public ::google::protobuf::Message {
 public:
  CmdRequest_KvRequest();
  virtual ~CmdRequest_KvRequest();

  CmdRequest_KvRequest(const CmdRequest_KvRequest& from);

  inline CmdRequest_KvRequest& operator=(const CmdRequest_KvRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdRequest_KvRequest& default_instance();

  void Swap(CmdRequest_KvRequest* other);

  // implements Message ----------------------------------------------

  CmdRequest_KvRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdRequest_KvRequest& from);
  void MergeFrom(const CmdRequest_KvRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const void* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // optional bytes value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:floyd.CmdRequest.KvRequest)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* key_;
  ::std::string* value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_floyd_2eproto();
  friend void protobuf_AssignDesc_floyd_2eproto();
  friend void protobuf_ShutdownFile_floyd_2eproto();

  void InitAsDefaultInstance();
  static CmdRequest_KvRequest* default_instance_;
};
// -------------------------------------------------------------------

class CmdRequest_LockRequest : public ::google::protobuf::Message {
 public:
  CmdRequest_LockRequest();
  virtual ~CmdRequest_LockRequest();

  CmdRequest_LockRequest(const CmdRequest_LockRequest& from);

  inline CmdRequest_LockRequest& operator=(const CmdRequest_LockRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdRequest_LockRequest& default_instance();

  void Swap(CmdRequest_LockRequest* other);

  // implements Message ----------------------------------------------

  CmdRequest_LockRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdRequest_LockRequest& from);
  void MergeFrom(const CmdRequest_LockRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required bytes holder = 2;
  inline bool has_holder() const;
  inline void clear_holder();
  static const int kHolderFieldNumber = 2;
  inline const ::std::string& holder() const;
  inline void set_holder(const ::std::string& value);
  inline void set_holder(const char* value);
  inline void set_holder(const void* value, size_t size);
  inline ::std::string* mutable_holder();
  inline ::std::string* release_holder();
  inline void set_allocated_holder(::std::string* holder);

  // optional uint64 lease_end = 3;
  inline bool has_lease_end() const;
  inline void clear_lease_end();
  static const int kLeaseEndFieldNumber = 3;
  inline ::google::protobuf::uint64 lease_end() const;
  inline void set_lease_end(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:floyd.CmdRequest.LockRequest)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_holder();
  inline void clear_has_holder();
  inline void set_has_lease_end();
  inline void clear_has_lease_end();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* holder_;
  ::google::protobuf::uint64 lease_end_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_floyd_2eproto();
  friend void protobuf_AssignDesc_floyd_2eproto();
  friend void protobuf_ShutdownFile_floyd_2eproto();

  void InitAsDefaultInstance();
  static CmdRequest_LockRequest* default_instance_;
};
// -------------------------------------------------------------------

class CmdRequest_ServerStatus : public ::google::protobuf::Message {
 public:
  CmdRequest_ServerStatus();
  virtual ~CmdRequest_ServerStatus();

  CmdRequest_ServerStatus(const CmdRequest_ServerStatus& from);

  inline CmdRequest_ServerStatus& operator=(const CmdRequest_ServerStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdRequest_ServerStatus& default_instance();

  void Swap(CmdRequest_ServerStatus* other);

  // implements Message ----------------------------------------------

  CmdRequest_ServerStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdRequest_ServerStatus& from);
  void MergeFrom(const CmdRequest_ServerStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 term = 1;
  inline bool has_term() const;
  inline void clear_term();
  static const int kTermFieldNumber = 1;
  inline ::google::protobuf::int64 term() const;
  inline void set_term(::google::protobuf::int64 value);

  // required int64 commit_index = 2;
  inline bool has_commit_index() const;
  inline void clear_commit_index();
  static const int kCommitIndexFieldNumber = 2;
  inline ::google::protobuf::int64 commit_index() const;
  inline void set_commit_index(::google::protobuf::int64 value);

  // optional bytes ip = 3;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 3;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const void* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional int32 port = 4;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 4;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:floyd.CmdRequest.ServerStatus)
 private:
  inline void set_has_term();
  inline void clear_has_term();
  inline void set_has_commit_index();
  inline void clear_has_commit_index();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 term_;
  ::google::protobuf::int64 commit_index_;
  ::std::string* ip_;
  ::google::protobuf::int32 port_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_floyd_2eproto();
  friend void protobuf_AssignDesc_floyd_2eproto();
  friend void protobuf_ShutdownFile_floyd_2eproto();

  void InitAsDefaultInstance();
  static CmdRequest_ServerStatus* default_instance_;
};
// -------------------------------------------------------------------

class CmdRequest : public ::google::protobuf::Message {
 public:
  CmdRequest();
  virtual ~CmdRequest();

  CmdRequest(const CmdRequest& from);

  inline CmdRequest& operator=(const CmdRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdRequest& default_instance();

  void Swap(CmdRequest* other);

  // implements Message ----------------------------------------------

  CmdRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdRequest& from);
  void MergeFrom(const CmdRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CmdRequest_RequestVote RequestVote;
  typedef CmdRequest_AppendEntries AppendEntries;
  typedef CmdRequest_KvRequest KvRequest;
  typedef CmdRequest_LockRequest LockRequest;
  typedef CmdRequest_ServerStatus ServerStatus;

  // accessors -------------------------------------------------------

  // required .floyd.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::floyd::Type type() const;
  inline void set_type(::floyd::Type value);

  // optional .floyd.CmdRequest.RequestVote request_vote = 2;
  inline bool has_request_vote() const;
  inline void clear_request_vote();
  static const int kRequestVoteFieldNumber = 2;
  inline const ::floyd::CmdRequest_RequestVote& request_vote() const;
  inline ::floyd::CmdRequest_RequestVote* mutable_request_vote();
  inline ::floyd::CmdRequest_RequestVote* release_request_vote();
  inline void set_allocated_request_vote(::floyd::CmdRequest_RequestVote* request_vote);

  // optional .floyd.CmdRequest.AppendEntries append_entries = 3;
  inline bool has_append_entries() const;
  inline void clear_append_entries();
  static const int kAppendEntriesFieldNumber = 3;
  inline const ::floyd::CmdRequest_AppendEntries& append_entries() const;
  inline ::floyd::CmdRequest_AppendEntries* mutable_append_entries();
  inline ::floyd::CmdRequest_AppendEntries* release_append_entries();
  inline void set_allocated_append_entries(::floyd::CmdRequest_AppendEntries* append_entries);

  // optional .floyd.CmdRequest.KvRequest kv_request = 4;
  inline bool has_kv_request() const;
  inline void clear_kv_request();
  static const int kKvRequestFieldNumber = 4;
  inline const ::floyd::CmdRequest_KvRequest& kv_request() const;
  inline ::floyd::CmdRequest_KvRequest* mutable_kv_request();
  inline ::floyd::CmdRequest_KvRequest* release_kv_request();
  inline void set_allocated_kv_request(::floyd::CmdRequest_KvRequest* kv_request);

  // optional .floyd.CmdRequest.LockRequest lock_request = 5;
  inline bool has_lock_request() const;
  inline void clear_lock_request();
  static const int kLockRequestFieldNumber = 5;
  inline const ::floyd::CmdRequest_LockRequest& lock_request() const;
  inline ::floyd::CmdRequest_LockRequest* mutable_lock_request();
  inline ::floyd::CmdRequest_LockRequest* release_lock_request();
  inline void set_allocated_lock_request(::floyd::CmdRequest_LockRequest* lock_request);

  // optional .floyd.CmdRequest.ServerStatus server_status = 6;
  inline bool has_server_status() const;
  inline void clear_server_status();
  static const int kServerStatusFieldNumber = 6;
  inline const ::floyd::CmdRequest_ServerStatus& server_status() const;
  inline ::floyd::CmdRequest_ServerStatus* mutable_server_status();
  inline ::floyd::CmdRequest_ServerStatus* release_server_status();
  inline void set_allocated_server_status(::floyd::CmdRequest_ServerStatus* server_status);

  // @@protoc_insertion_point(class_scope:floyd.CmdRequest)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_request_vote();
  inline void clear_has_request_vote();
  inline void set_has_append_entries();
  inline void clear_has_append_entries();
  inline void set_has_kv_request();
  inline void clear_has_kv_request();
  inline void set_has_lock_request();
  inline void clear_has_lock_request();
  inline void set_has_server_status();
  inline void clear_has_server_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::floyd::CmdRequest_RequestVote* request_vote_;
  ::floyd::CmdRequest_AppendEntries* append_entries_;
  ::floyd::CmdRequest_KvRequest* kv_request_;
  ::floyd::CmdRequest_LockRequest* lock_request_;
  ::floyd::CmdRequest_ServerStatus* server_status_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_floyd_2eproto();
  friend void protobuf_AssignDesc_floyd_2eproto();
  friend void protobuf_ShutdownFile_floyd_2eproto();

  void InitAsDefaultInstance();
  static CmdRequest* default_instance_;
};
// -------------------------------------------------------------------

class CmdResponse_RequestVoteResponse : public ::google::protobuf::Message {
 public:
  CmdResponse_RequestVoteResponse();
  virtual ~CmdResponse_RequestVoteResponse();

  CmdResponse_RequestVoteResponse(const CmdResponse_RequestVoteResponse& from);

  inline CmdResponse_RequestVoteResponse& operator=(const CmdResponse_RequestVoteResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdResponse_RequestVoteResponse& default_instance();

  void Swap(CmdResponse_RequestVoteResponse* other);

  // implements Message ----------------------------------------------

  CmdResponse_RequestVoteResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdResponse_RequestVoteResponse& from);
  void MergeFrom(const CmdResponse_RequestVoteResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 term = 1;
  inline bool has_term() const;
  inline void clear_term();
  static const int kTermFieldNumber = 1;
  inline ::google::protobuf::uint64 term() const;
  inline void set_term(::google::protobuf::uint64 value);

  // required bool vote_granted = 2;
  inline bool has_vote_granted() const;
  inline void clear_vote_granted();
  static const int kVoteGrantedFieldNumber = 2;
  inline bool vote_granted() const;
  inline void set_vote_granted(bool value);

  // @@protoc_insertion_point(class_scope:floyd.CmdResponse.RequestVoteResponse)
 private:
  inline void set_has_term();
  inline void clear_has_term();
  inline void set_has_vote_granted();
  inline void clear_has_vote_granted();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 term_;
  bool vote_granted_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_floyd_2eproto();
  friend void protobuf_AssignDesc_floyd_2eproto();
  friend void protobuf_ShutdownFile_floyd_2eproto();

  void InitAsDefaultInstance();
  static CmdResponse_RequestVoteResponse* default_instance_;
};
// -------------------------------------------------------------------

class CmdResponse_AppendEntriesResponse : public ::google::protobuf::Message {
 public:
  CmdResponse_AppendEntriesResponse();
  virtual ~CmdResponse_AppendEntriesResponse();

  CmdResponse_AppendEntriesResponse(const CmdResponse_AppendEntriesResponse& from);

  inline CmdResponse_AppendEntriesResponse& operator=(const CmdResponse_AppendEntriesResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdResponse_AppendEntriesResponse& default_instance();

  void Swap(CmdResponse_AppendEntriesResponse* other);

  // implements Message ----------------------------------------------

  CmdResponse_AppendEntriesResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdResponse_AppendEntriesResponse& from);
  void MergeFrom(const CmdResponse_AppendEntriesResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 term = 1;
  inline bool has_term() const;
  inline void clear_term();
  static const int kTermFieldNumber = 1;
  inline ::google::protobuf::uint64 term() const;
  inline void set_term(::google::protobuf::uint64 value);

  // required bool success = 2;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 2;
  inline bool success() const;
  inline void set_success(bool value);

  // optional uint64 last_log_index = 3;
  inline bool has_last_log_index() const;
  inline void clear_last_log_index();
  static const int kLastLogIndexFieldNumber = 3;
  inline ::google::protobuf::uint64 last_log_index() const;
  inline void set_last_log_index(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:floyd.CmdResponse.AppendEntriesResponse)
 private:
  inline void set_has_term();
  inline void clear_has_term();
  inline void set_has_success();
  inline void clear_has_success();
  inline void set_has_last_log_index();
  inline void clear_has_last_log_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 term_;
  ::google::protobuf::uint64 last_log_index_;
  bool success_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_floyd_2eproto();
  friend void protobuf_AssignDesc_floyd_2eproto();
  friend void protobuf_ShutdownFile_floyd_2eproto();

  void InitAsDefaultInstance();
  static CmdResponse_AppendEntriesResponse* default_instance_;
};
// -------------------------------------------------------------------

class CmdResponse_KvResponse : public ::google::protobuf::Message {
 public:
  CmdResponse_KvResponse();
  virtual ~CmdResponse_KvResponse();

  CmdResponse_KvResponse(const CmdResponse_KvResponse& from);

  inline CmdResponse_KvResponse& operator=(const CmdResponse_KvResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdResponse_KvResponse& default_instance();

  void Swap(CmdResponse_KvResponse* other);

  // implements Message ----------------------------------------------

  CmdResponse_KvResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdResponse_KvResponse& from);
  void MergeFrom(const CmdResponse_KvResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes value = 1;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:floyd.CmdResponse.KvResponse)
 private:
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_floyd_2eproto();
  friend void protobuf_AssignDesc_floyd_2eproto();
  friend void protobuf_ShutdownFile_floyd_2eproto();

  void InitAsDefaultInstance();
  static CmdResponse_KvResponse* default_instance_;
};
// -------------------------------------------------------------------

class CmdResponse_ServerStatus : public ::google::protobuf::Message {
 public:
  CmdResponse_ServerStatus();
  virtual ~CmdResponse_ServerStatus();

  CmdResponse_ServerStatus(const CmdResponse_ServerStatus& from);

  inline CmdResponse_ServerStatus& operator=(const CmdResponse_ServerStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdResponse_ServerStatus& default_instance();

  void Swap(CmdResponse_ServerStatus* other);

  // implements Message ----------------------------------------------

  CmdResponse_ServerStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdResponse_ServerStatus& from);
  void MergeFrom(const CmdResponse_ServerStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 term = 1;
  inline bool has_term() const;
  inline void clear_term();
  static const int kTermFieldNumber = 1;
  inline ::google::protobuf::uint64 term() const;
  inline void set_term(::google::protobuf::uint64 value);

  // required uint64 commit_index = 2;
  inline bool has_commit_index() const;
  inline void clear_commit_index();
  static const int kCommitIndexFieldNumber = 2;
  inline ::google::protobuf::uint64 commit_index() const;
  inline void set_commit_index(::google::protobuf::uint64 value);

  // required bytes role = 3;
  inline bool has_role() const;
  inline void clear_role();
  static const int kRoleFieldNumber = 3;
  inline const ::std::string& role() const;
  inline void set_role(const ::std::string& value);
  inline void set_role(const char* value);
  inline void set_role(const void* value, size_t size);
  inline ::std::string* mutable_role();
  inline ::std::string* release_role();
  inline void set_allocated_role(::std::string* role);

  // optional bytes leader_ip = 4;
  inline bool has_leader_ip() const;
  inline void clear_leader_ip();
  static const int kLeaderIpFieldNumber = 4;
  inline const ::std::string& leader_ip() const;
  inline void set_leader_ip(const ::std::string& value);
  inline void set_leader_ip(const char* value);
  inline void set_leader_ip(const void* value, size_t size);
  inline ::std::string* mutable_leader_ip();
  inline ::std::string* release_leader_ip();
  inline void set_allocated_leader_ip(::std::string* leader_ip);

  // optional int32 leader_port = 5;
  inline bool has_leader_port() const;
  inline void clear_leader_port();
  static const int kLeaderPortFieldNumber = 5;
  inline ::google::protobuf::int32 leader_port() const;
  inline void set_leader_port(::google::protobuf::int32 value);

  // optional bytes voted_for_ip = 6;
  inline bool has_voted_for_ip() const;
  inline void clear_voted_for_ip();
  static const int kVotedForIpFieldNumber = 6;
  inline const ::std::string& voted_for_ip() const;
  inline void set_voted_for_ip(const ::std::string& value);
  inline void set_voted_for_ip(const char* value);
  inline void set_voted_for_ip(const void* value, size_t size);
  inline ::std::string* mutable_voted_for_ip();
  inline ::std::string* release_voted_for_ip();
  inline void set_allocated_voted_for_ip(::std::string* voted_for_ip);

  // optional int32 voted_for_port = 7;
  inline bool has_voted_for_port() const;
  inline void clear_voted_for_port();
  static const int kVotedForPortFieldNumber = 7;
  inline ::google::protobuf::int32 voted_for_port() const;
  inline void set_voted_for_port(::google::protobuf::int32 value);

  // optional uint64 last_log_term = 8;
  inline bool has_last_log_term() const;
  inline void clear_last_log_term();
  static const int kLastLogTermFieldNumber = 8;
  inline ::google::protobuf::uint64 last_log_term() const;
  inline void set_last_log_term(::google::protobuf::uint64 value);

  // optional uint64 last_log_index = 9;
  inline bool has_last_log_index() const;
  inline void clear_last_log_index();
  static const int kLastLogIndexFieldNumber = 9;
  inline ::google::protobuf::uint64 last_log_index() const;
  inline void set_last_log_index(::google::protobuf::uint64 value);

  // optional uint64 last_applied = 10;
  inline bool has_last_applied() const;
  inline void clear_last_applied();
  static const int kLastAppliedFieldNumber = 10;
  inline ::google::protobuf::uint64 last_applied() const;
  inline void set_last_applied(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:floyd.CmdResponse.ServerStatus)
 private:
  inline void set_has_term();
  inline void clear_has_term();
  inline void set_has_commit_index();
  inline void clear_has_commit_index();
  inline void set_has_role();
  inline void clear_has_role();
  inline void set_has_leader_ip();
  inline void clear_has_leader_ip();
  inline void set_has_leader_port();
  inline void clear_has_leader_port();
  inline void set_has_voted_for_ip();
  inline void clear_has_voted_for_ip();
  inline void set_has_voted_for_port();
  inline void clear_has_voted_for_port();
  inline void set_has_last_log_term();
  inline void clear_has_last_log_term();
  inline void set_has_last_log_index();
  inline void clear_has_last_log_index();
  inline void set_has_last_applied();
  inline void clear_has_last_applied();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 term_;
  ::google::protobuf::uint64 commit_index_;
  ::std::string* role_;
  ::std::string* leader_ip_;
  ::std::string* voted_for_ip_;
  ::google::protobuf::int32 leader_port_;
  ::google::protobuf::int32 voted_for_port_;
  ::google::protobuf::uint64 last_log_term_;
  ::google::protobuf::uint64 last_log_index_;
  ::google::protobuf::uint64 last_applied_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_floyd_2eproto();
  friend void protobuf_AssignDesc_floyd_2eproto();
  friend void protobuf_ShutdownFile_floyd_2eproto();

  void InitAsDefaultInstance();
  static CmdResponse_ServerStatus* default_instance_;
};
// -------------------------------------------------------------------

class CmdResponse : public ::google::protobuf::Message {
 public:
  CmdResponse();
  virtual ~CmdResponse();

  CmdResponse(const CmdResponse& from);

  inline CmdResponse& operator=(const CmdResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdResponse& default_instance();

  void Swap(CmdResponse* other);

  // implements Message ----------------------------------------------

  CmdResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdResponse& from);
  void MergeFrom(const CmdResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CmdResponse_RequestVoteResponse RequestVoteResponse;
  typedef CmdResponse_AppendEntriesResponse AppendEntriesResponse;
  typedef CmdResponse_KvResponse KvResponse;
  typedef CmdResponse_ServerStatus ServerStatus;

  // accessors -------------------------------------------------------

  // required .floyd.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::floyd::Type type() const;
  inline void set_type(::floyd::Type value);

  // optional .floyd.StatusCode code = 2;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 2;
  inline ::floyd::StatusCode code() const;
  inline void set_code(::floyd::StatusCode value);

  // optional .floyd.CmdResponse.RequestVoteResponse request_vote_res = 3;
  inline bool has_request_vote_res() const;
  inline void clear_request_vote_res();
  static const int kRequestVoteResFieldNumber = 3;
  inline const ::floyd::CmdResponse_RequestVoteResponse& request_vote_res() const;
  inline ::floyd::CmdResponse_RequestVoteResponse* mutable_request_vote_res();
  inline ::floyd::CmdResponse_RequestVoteResponse* release_request_vote_res();
  inline void set_allocated_request_vote_res(::floyd::CmdResponse_RequestVoteResponse* request_vote_res);

  // optional .floyd.CmdResponse.AppendEntriesResponse append_entries_res = 4;
  inline bool has_append_entries_res() const;
  inline void clear_append_entries_res();
  static const int kAppendEntriesResFieldNumber = 4;
  inline const ::floyd::CmdResponse_AppendEntriesResponse& append_entries_res() const;
  inline ::floyd::CmdResponse_AppendEntriesResponse* mutable_append_entries_res();
  inline ::floyd::CmdResponse_AppendEntriesResponse* release_append_entries_res();
  inline void set_allocated_append_entries_res(::floyd::CmdResponse_AppendEntriesResponse* append_entries_res);

  // optional bytes msg = 5;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 5;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const void* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // optional .floyd.CmdResponse.KvResponse kv_response = 6;
  inline bool has_kv_response() const;
  inline void clear_kv_response();
  static const int kKvResponseFieldNumber = 6;
  inline const ::floyd::CmdResponse_KvResponse& kv_response() const;
  inline ::floyd::CmdResponse_KvResponse* mutable_kv_response();
  inline ::floyd::CmdResponse_KvResponse* release_kv_response();
  inline void set_allocated_kv_response(::floyd::CmdResponse_KvResponse* kv_response);

  // optional .floyd.CmdResponse.ServerStatus server_status = 7;
  inline bool has_server_status() const;
  inline void clear_server_status();
  static const int kServerStatusFieldNumber = 7;
  inline const ::floyd::CmdResponse_ServerStatus& server_status() const;
  inline ::floyd::CmdResponse_ServerStatus* mutable_server_status();
  inline ::floyd::CmdResponse_ServerStatus* release_server_status();
  inline void set_allocated_server_status(::floyd::CmdResponse_ServerStatus* server_status);

  // @@protoc_insertion_point(class_scope:floyd.CmdResponse)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_request_vote_res();
  inline void clear_has_request_vote_res();
  inline void set_has_append_entries_res();
  inline void clear_has_append_entries_res();
  inline void set_has_msg();
  inline void clear_has_msg();
  inline void set_has_kv_response();
  inline void clear_has_kv_response();
  inline void set_has_server_status();
  inline void clear_has_server_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  int code_;
  ::floyd::CmdResponse_RequestVoteResponse* request_vote_res_;
  ::floyd::CmdResponse_AppendEntriesResponse* append_entries_res_;
  ::std::string* msg_;
  ::floyd::CmdResponse_KvResponse* kv_response_;
  ::floyd::CmdResponse_ServerStatus* server_status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_floyd_2eproto();
  friend void protobuf_AssignDesc_floyd_2eproto();
  friend void protobuf_ShutdownFile_floyd_2eproto();

  void InitAsDefaultInstance();
  static CmdResponse* default_instance_;
};
// -------------------------------------------------------------------

class Lock : public ::google::protobuf::Message {
 public:
  Lock();
  virtual ~Lock();

  Lock(const Lock& from);

  inline Lock& operator=(const Lock& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Lock& default_instance();

  void Swap(Lock* other);

  // implements Message ----------------------------------------------

  Lock* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Lock& from);
  void MergeFrom(const Lock& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes holder = 1;
  inline bool has_holder() const;
  inline void clear_holder();
  static const int kHolderFieldNumber = 1;
  inline const ::std::string& holder() const;
  inline void set_holder(const ::std::string& value);
  inline void set_holder(const char* value);
  inline void set_holder(const void* value, size_t size);
  inline ::std::string* mutable_holder();
  inline ::std::string* release_holder();
  inline void set_allocated_holder(::std::string* holder);

  // required uint64 lease_end = 2;
  inline bool has_lease_end() const;
  inline void clear_lease_end();
  static const int kLeaseEndFieldNumber = 2;
  inline ::google::protobuf::uint64 lease_end() const;
  inline void set_lease_end(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:floyd.Lock)
 private:
  inline void set_has_holder();
  inline void clear_has_holder();
  inline void set_has_lease_end();
  inline void clear_has_lease_end();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* holder_;
  ::google::protobuf::uint64 lease_end_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_floyd_2eproto();
  friend void protobuf_AssignDesc_floyd_2eproto();
  friend void protobuf_ShutdownFile_floyd_2eproto();

  void InitAsDefaultInstance();
  static Lock* default_instance_;
};
// ===================================================================


// ===================================================================

// Entry

// required .floyd.Entry.OpType optype = 1;
inline bool Entry::has_optype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Entry::set_has_optype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Entry::clear_has_optype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Entry::clear_optype() {
  optype_ = 0;
  clear_has_optype();
}
inline ::floyd::Entry_OpType Entry::optype() const {
  return static_cast< ::floyd::Entry_OpType >(optype_);
}
inline void Entry::set_optype(::floyd::Entry_OpType value) {
  assert(::floyd::Entry_OpType_IsValid(value));
  set_has_optype();
  optype_ = value;
}

// required uint64 term = 2;
inline bool Entry::has_term() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Entry::set_has_term() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Entry::clear_has_term() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Entry::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
  clear_has_term();
}
inline ::google::protobuf::uint64 Entry::term() const {
  return term_;
}
inline void Entry::set_term(::google::protobuf::uint64 value) {
  set_has_term();
  term_ = value;
}

// required string key = 3;
inline bool Entry::has_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Entry::set_has_key() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Entry::clear_has_key() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Entry::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& Entry::key() const {
  return *key_;
}
inline void Entry::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void Entry::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void Entry::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Entry::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* Entry::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Entry::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes value = 4;
inline bool Entry::has_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Entry::set_has_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Entry::clear_has_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Entry::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& Entry::value() const {
  return *value_;
}
inline void Entry::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void Entry::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void Entry::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Entry::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* Entry::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Entry::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes holder = 5;
inline bool Entry::has_holder() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Entry::set_has_holder() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Entry::clear_has_holder() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Entry::clear_holder() {
  if (holder_ != &::google::protobuf::internal::kEmptyString) {
    holder_->clear();
  }
  clear_has_holder();
}
inline const ::std::string& Entry::holder() const {
  return *holder_;
}
inline void Entry::set_holder(const ::std::string& value) {
  set_has_holder();
  if (holder_ == &::google::protobuf::internal::kEmptyString) {
    holder_ = new ::std::string;
  }
  holder_->assign(value);
}
inline void Entry::set_holder(const char* value) {
  set_has_holder();
  if (holder_ == &::google::protobuf::internal::kEmptyString) {
    holder_ = new ::std::string;
  }
  holder_->assign(value);
}
inline void Entry::set_holder(const void* value, size_t size) {
  set_has_holder();
  if (holder_ == &::google::protobuf::internal::kEmptyString) {
    holder_ = new ::std::string;
  }
  holder_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Entry::mutable_holder() {
  set_has_holder();
  if (holder_ == &::google::protobuf::internal::kEmptyString) {
    holder_ = new ::std::string;
  }
  return holder_;
}
inline ::std::string* Entry::release_holder() {
  clear_has_holder();
  if (holder_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = holder_;
    holder_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Entry::set_allocated_holder(::std::string* holder) {
  if (holder_ != &::google::protobuf::internal::kEmptyString) {
    delete holder_;
  }
  if (holder) {
    set_has_holder();
    holder_ = holder;
  } else {
    clear_has_holder();
    holder_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 lease_end = 6;
inline bool Entry::has_lease_end() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Entry::set_has_lease_end() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Entry::clear_has_lease_end() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Entry::clear_lease_end() {
  lease_end_ = GOOGLE_ULONGLONG(0);
  clear_has_lease_end();
}
inline ::google::protobuf::uint64 Entry::lease_end() const {
  return lease_end_;
}
inline void Entry::set_lease_end(::google::protobuf::uint64 value) {
  set_has_lease_end();
  lease_end_ = value;
}

// -------------------------------------------------------------------

// CmdRequest_RequestVote

// required uint64 term = 1;
inline bool CmdRequest_RequestVote::has_term() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdRequest_RequestVote::set_has_term() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdRequest_RequestVote::clear_has_term() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdRequest_RequestVote::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
  clear_has_term();
}
inline ::google::protobuf::uint64 CmdRequest_RequestVote::term() const {
  return term_;
}
inline void CmdRequest_RequestVote::set_term(::google::protobuf::uint64 value) {
  set_has_term();
  term_ = value;
}

// required bytes ip = 2;
inline bool CmdRequest_RequestVote::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdRequest_RequestVote::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdRequest_RequestVote::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdRequest_RequestVote::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& CmdRequest_RequestVote::ip() const {
  return *ip_;
}
inline void CmdRequest_RequestVote::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void CmdRequest_RequestVote::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void CmdRequest_RequestVote::set_ip(const void* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CmdRequest_RequestVote::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* CmdRequest_RequestVote::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CmdRequest_RequestVote::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 port = 3;
inline bool CmdRequest_RequestVote::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdRequest_RequestVote::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdRequest_RequestVote::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdRequest_RequestVote::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 CmdRequest_RequestVote::port() const {
  return port_;
}
inline void CmdRequest_RequestVote::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
}

// required uint64 last_log_index = 4;
inline bool CmdRequest_RequestVote::has_last_log_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CmdRequest_RequestVote::set_has_last_log_index() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CmdRequest_RequestVote::clear_has_last_log_index() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CmdRequest_RequestVote::clear_last_log_index() {
  last_log_index_ = GOOGLE_ULONGLONG(0);
  clear_has_last_log_index();
}
inline ::google::protobuf::uint64 CmdRequest_RequestVote::last_log_index() const {
  return last_log_index_;
}
inline void CmdRequest_RequestVote::set_last_log_index(::google::protobuf::uint64 value) {
  set_has_last_log_index();
  last_log_index_ = value;
}

// required uint64 last_log_term = 5;
inline bool CmdRequest_RequestVote::has_last_log_term() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CmdRequest_RequestVote::set_has_last_log_term() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CmdRequest_RequestVote::clear_has_last_log_term() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CmdRequest_RequestVote::clear_last_log_term() {
  last_log_term_ = GOOGLE_ULONGLONG(0);
  clear_has_last_log_term();
}
inline ::google::protobuf::uint64 CmdRequest_RequestVote::last_log_term() const {
  return last_log_term_;
}
inline void CmdRequest_RequestVote::set_last_log_term(::google::protobuf::uint64 value) {
  set_has_last_log_term();
  last_log_term_ = value;
}

// -------------------------------------------------------------------

// CmdRequest_AppendEntries

// required uint64 term = 1;
inline bool CmdRequest_AppendEntries::has_term() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdRequest_AppendEntries::set_has_term() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdRequest_AppendEntries::clear_has_term() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdRequest_AppendEntries::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
  clear_has_term();
}
inline ::google::protobuf::uint64 CmdRequest_AppendEntries::term() const {
  return term_;
}
inline void CmdRequest_AppendEntries::set_term(::google::protobuf::uint64 value) {
  set_has_term();
  term_ = value;
}

// required bytes ip = 2;
inline bool CmdRequest_AppendEntries::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdRequest_AppendEntries::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdRequest_AppendEntries::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdRequest_AppendEntries::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& CmdRequest_AppendEntries::ip() const {
  return *ip_;
}
inline void CmdRequest_AppendEntries::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void CmdRequest_AppendEntries::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void CmdRequest_AppendEntries::set_ip(const void* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CmdRequest_AppendEntries::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* CmdRequest_AppendEntries::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CmdRequest_AppendEntries::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 port = 3;
inline bool CmdRequest_AppendEntries::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdRequest_AppendEntries::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdRequest_AppendEntries::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdRequest_AppendEntries::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 CmdRequest_AppendEntries::port() const {
  return port_;
}
inline void CmdRequest_AppendEntries::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
}

// required uint64 prev_log_index = 4;
inline bool CmdRequest_AppendEntries::has_prev_log_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CmdRequest_AppendEntries::set_has_prev_log_index() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CmdRequest_AppendEntries::clear_has_prev_log_index() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CmdRequest_AppendEntries::clear_prev_log_index() {
  prev_log_index_ = GOOGLE_ULONGLONG(0);
  clear_has_prev_log_index();
}
inline ::google::protobuf::uint64 CmdRequest_AppendEntries::prev_log_index() const {
  return prev_log_index_;
}
inline void CmdRequest_AppendEntries::set_prev_log_index(::google::protobuf::uint64 value) {
  set_has_prev_log_index();
  prev_log_index_ = value;
}

// required uint64 prev_log_term = 5;
inline bool CmdRequest_AppendEntries::has_prev_log_term() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CmdRequest_AppendEntries::set_has_prev_log_term() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CmdRequest_AppendEntries::clear_has_prev_log_term() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CmdRequest_AppendEntries::clear_prev_log_term() {
  prev_log_term_ = GOOGLE_ULONGLONG(0);
  clear_has_prev_log_term();
}
inline ::google::protobuf::uint64 CmdRequest_AppendEntries::prev_log_term() const {
  return prev_log_term_;
}
inline void CmdRequest_AppendEntries::set_prev_log_term(::google::protobuf::uint64 value) {
  set_has_prev_log_term();
  prev_log_term_ = value;
}

// required uint64 leader_commit = 6;
inline bool CmdRequest_AppendEntries::has_leader_commit() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CmdRequest_AppendEntries::set_has_leader_commit() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CmdRequest_AppendEntries::clear_has_leader_commit() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CmdRequest_AppendEntries::clear_leader_commit() {
  leader_commit_ = GOOGLE_ULONGLONG(0);
  clear_has_leader_commit();
}
inline ::google::protobuf::uint64 CmdRequest_AppendEntries::leader_commit() const {
  return leader_commit_;
}
inline void CmdRequest_AppendEntries::set_leader_commit(::google::protobuf::uint64 value) {
  set_has_leader_commit();
  leader_commit_ = value;
}

// repeated .floyd.Entry entries = 7;
inline int CmdRequest_AppendEntries::entries_size() const {
  return entries_.size();
}
inline void CmdRequest_AppendEntries::clear_entries() {
  entries_.Clear();
}
inline const ::floyd::Entry& CmdRequest_AppendEntries::entries(int index) const {
  return entries_.Get(index);
}
inline ::floyd::Entry* CmdRequest_AppendEntries::mutable_entries(int index) {
  return entries_.Mutable(index);
}
inline ::floyd::Entry* CmdRequest_AppendEntries::add_entries() {
  return entries_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::floyd::Entry >&
CmdRequest_AppendEntries::entries() const {
  return entries_;
}
inline ::google::protobuf::RepeatedPtrField< ::floyd::Entry >*
CmdRequest_AppendEntries::mutable_entries() {
  return &entries_;
}

// -------------------------------------------------------------------

// CmdRequest_KvRequest

// required bytes key = 1;
inline bool CmdRequest_KvRequest::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdRequest_KvRequest::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdRequest_KvRequest::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdRequest_KvRequest::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& CmdRequest_KvRequest::key() const {
  return *key_;
}
inline void CmdRequest_KvRequest::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void CmdRequest_KvRequest::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void CmdRequest_KvRequest::set_key(const void* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CmdRequest_KvRequest::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* CmdRequest_KvRequest::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CmdRequest_KvRequest::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes value = 2;
inline bool CmdRequest_KvRequest::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdRequest_KvRequest::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdRequest_KvRequest::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdRequest_KvRequest::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& CmdRequest_KvRequest::value() const {
  return *value_;
}
inline void CmdRequest_KvRequest::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void CmdRequest_KvRequest::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void CmdRequest_KvRequest::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CmdRequest_KvRequest::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* CmdRequest_KvRequest::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CmdRequest_KvRequest::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CmdRequest_LockRequest

// required bytes name = 1;
inline bool CmdRequest_LockRequest::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdRequest_LockRequest::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdRequest_LockRequest::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdRequest_LockRequest::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CmdRequest_LockRequest::name() const {
  return *name_;
}
inline void CmdRequest_LockRequest::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CmdRequest_LockRequest::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CmdRequest_LockRequest::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CmdRequest_LockRequest::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* CmdRequest_LockRequest::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CmdRequest_LockRequest::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes holder = 2;
inline bool CmdRequest_LockRequest::has_holder() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdRequest_LockRequest::set_has_holder() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdRequest_LockRequest::clear_has_holder() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdRequest_LockRequest::clear_holder() {
  if (holder_ != &::google::protobuf::internal::kEmptyString) {
    holder_->clear();
  }
  clear_has_holder();
}
inline const ::std::string& CmdRequest_LockRequest::holder() const {
  return *holder_;
}
inline void CmdRequest_LockRequest::set_holder(const ::std::string& value) {
  set_has_holder();
  if (holder_ == &::google::protobuf::internal::kEmptyString) {
    holder_ = new ::std::string;
  }
  holder_->assign(value);
}
inline void CmdRequest_LockRequest::set_holder(const char* value) {
  set_has_holder();
  if (holder_ == &::google::protobuf::internal::kEmptyString) {
    holder_ = new ::std::string;
  }
  holder_->assign(value);
}
inline void CmdRequest_LockRequest::set_holder(const void* value, size_t size) {
  set_has_holder();
  if (holder_ == &::google::protobuf::internal::kEmptyString) {
    holder_ = new ::std::string;
  }
  holder_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CmdRequest_LockRequest::mutable_holder() {
  set_has_holder();
  if (holder_ == &::google::protobuf::internal::kEmptyString) {
    holder_ = new ::std::string;
  }
  return holder_;
}
inline ::std::string* CmdRequest_LockRequest::release_holder() {
  clear_has_holder();
  if (holder_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = holder_;
    holder_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CmdRequest_LockRequest::set_allocated_holder(::std::string* holder) {
  if (holder_ != &::google::protobuf::internal::kEmptyString) {
    delete holder_;
  }
  if (holder) {
    set_has_holder();
    holder_ = holder;
  } else {
    clear_has_holder();
    holder_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 lease_end = 3;
inline bool CmdRequest_LockRequest::has_lease_end() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdRequest_LockRequest::set_has_lease_end() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdRequest_LockRequest::clear_has_lease_end() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdRequest_LockRequest::clear_lease_end() {
  lease_end_ = GOOGLE_ULONGLONG(0);
  clear_has_lease_end();
}
inline ::google::protobuf::uint64 CmdRequest_LockRequest::lease_end() const {
  return lease_end_;
}
inline void CmdRequest_LockRequest::set_lease_end(::google::protobuf::uint64 value) {
  set_has_lease_end();
  lease_end_ = value;
}

// -------------------------------------------------------------------

// CmdRequest_ServerStatus

// required int64 term = 1;
inline bool CmdRequest_ServerStatus::has_term() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdRequest_ServerStatus::set_has_term() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdRequest_ServerStatus::clear_has_term() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdRequest_ServerStatus::clear_term() {
  term_ = GOOGLE_LONGLONG(0);
  clear_has_term();
}
inline ::google::protobuf::int64 CmdRequest_ServerStatus::term() const {
  return term_;
}
inline void CmdRequest_ServerStatus::set_term(::google::protobuf::int64 value) {
  set_has_term();
  term_ = value;
}

// required int64 commit_index = 2;
inline bool CmdRequest_ServerStatus::has_commit_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdRequest_ServerStatus::set_has_commit_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdRequest_ServerStatus::clear_has_commit_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdRequest_ServerStatus::clear_commit_index() {
  commit_index_ = GOOGLE_LONGLONG(0);
  clear_has_commit_index();
}
inline ::google::protobuf::int64 CmdRequest_ServerStatus::commit_index() const {
  return commit_index_;
}
inline void CmdRequest_ServerStatus::set_commit_index(::google::protobuf::int64 value) {
  set_has_commit_index();
  commit_index_ = value;
}

// optional bytes ip = 3;
inline bool CmdRequest_ServerStatus::has_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdRequest_ServerStatus::set_has_ip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdRequest_ServerStatus::clear_has_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdRequest_ServerStatus::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& CmdRequest_ServerStatus::ip() const {
  return *ip_;
}
inline void CmdRequest_ServerStatus::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void CmdRequest_ServerStatus::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void CmdRequest_ServerStatus::set_ip(const void* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CmdRequest_ServerStatus::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* CmdRequest_ServerStatus::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CmdRequest_ServerStatus::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 port = 4;
inline bool CmdRequest_ServerStatus::has_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CmdRequest_ServerStatus::set_has_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CmdRequest_ServerStatus::clear_has_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CmdRequest_ServerStatus::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 CmdRequest_ServerStatus::port() const {
  return port_;
}
inline void CmdRequest_ServerStatus::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
}

// -------------------------------------------------------------------

// CmdRequest

// required .floyd.Type type = 1;
inline bool CmdRequest::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdRequest::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdRequest::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::floyd::Type CmdRequest::type() const {
  return static_cast< ::floyd::Type >(type_);
}
inline void CmdRequest::set_type(::floyd::Type value) {
  assert(::floyd::Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .floyd.CmdRequest.RequestVote request_vote = 2;
inline bool CmdRequest::has_request_vote() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdRequest::set_has_request_vote() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdRequest::clear_has_request_vote() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdRequest::clear_request_vote() {
  if (request_vote_ != NULL) request_vote_->::floyd::CmdRequest_RequestVote::Clear();
  clear_has_request_vote();
}
inline const ::floyd::CmdRequest_RequestVote& CmdRequest::request_vote() const {
  return request_vote_ != NULL ? *request_vote_ : *default_instance_->request_vote_;
}
inline ::floyd::CmdRequest_RequestVote* CmdRequest::mutable_request_vote() {
  set_has_request_vote();
  if (request_vote_ == NULL) request_vote_ = new ::floyd::CmdRequest_RequestVote;
  return request_vote_;
}
inline ::floyd::CmdRequest_RequestVote* CmdRequest::release_request_vote() {
  clear_has_request_vote();
  ::floyd::CmdRequest_RequestVote* temp = request_vote_;
  request_vote_ = NULL;
  return temp;
}
inline void CmdRequest::set_allocated_request_vote(::floyd::CmdRequest_RequestVote* request_vote) {
  delete request_vote_;
  request_vote_ = request_vote;
  if (request_vote) {
    set_has_request_vote();
  } else {
    clear_has_request_vote();
  }
}

// optional .floyd.CmdRequest.AppendEntries append_entries = 3;
inline bool CmdRequest::has_append_entries() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdRequest::set_has_append_entries() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdRequest::clear_has_append_entries() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdRequest::clear_append_entries() {
  if (append_entries_ != NULL) append_entries_->::floyd::CmdRequest_AppendEntries::Clear();
  clear_has_append_entries();
}
inline const ::floyd::CmdRequest_AppendEntries& CmdRequest::append_entries() const {
  return append_entries_ != NULL ? *append_entries_ : *default_instance_->append_entries_;
}
inline ::floyd::CmdRequest_AppendEntries* CmdRequest::mutable_append_entries() {
  set_has_append_entries();
  if (append_entries_ == NULL) append_entries_ = new ::floyd::CmdRequest_AppendEntries;
  return append_entries_;
}
inline ::floyd::CmdRequest_AppendEntries* CmdRequest::release_append_entries() {
  clear_has_append_entries();
  ::floyd::CmdRequest_AppendEntries* temp = append_entries_;
  append_entries_ = NULL;
  return temp;
}
inline void CmdRequest::set_allocated_append_entries(::floyd::CmdRequest_AppendEntries* append_entries) {
  delete append_entries_;
  append_entries_ = append_entries;
  if (append_entries) {
    set_has_append_entries();
  } else {
    clear_has_append_entries();
  }
}

// optional .floyd.CmdRequest.KvRequest kv_request = 4;
inline bool CmdRequest::has_kv_request() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CmdRequest::set_has_kv_request() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CmdRequest::clear_has_kv_request() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CmdRequest::clear_kv_request() {
  if (kv_request_ != NULL) kv_request_->::floyd::CmdRequest_KvRequest::Clear();
  clear_has_kv_request();
}
inline const ::floyd::CmdRequest_KvRequest& CmdRequest::kv_request() const {
  return kv_request_ != NULL ? *kv_request_ : *default_instance_->kv_request_;
}
inline ::floyd::CmdRequest_KvRequest* CmdRequest::mutable_kv_request() {
  set_has_kv_request();
  if (kv_request_ == NULL) kv_request_ = new ::floyd::CmdRequest_KvRequest;
  return kv_request_;
}
inline ::floyd::CmdRequest_KvRequest* CmdRequest::release_kv_request() {
  clear_has_kv_request();
  ::floyd::CmdRequest_KvRequest* temp = kv_request_;
  kv_request_ = NULL;
  return temp;
}
inline void CmdRequest::set_allocated_kv_request(::floyd::CmdRequest_KvRequest* kv_request) {
  delete kv_request_;
  kv_request_ = kv_request;
  if (kv_request) {
    set_has_kv_request();
  } else {
    clear_has_kv_request();
  }
}

// optional .floyd.CmdRequest.LockRequest lock_request = 5;
inline bool CmdRequest::has_lock_request() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CmdRequest::set_has_lock_request() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CmdRequest::clear_has_lock_request() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CmdRequest::clear_lock_request() {
  if (lock_request_ != NULL) lock_request_->::floyd::CmdRequest_LockRequest::Clear();
  clear_has_lock_request();
}
inline const ::floyd::CmdRequest_LockRequest& CmdRequest::lock_request() const {
  return lock_request_ != NULL ? *lock_request_ : *default_instance_->lock_request_;
}
inline ::floyd::CmdRequest_LockRequest* CmdRequest::mutable_lock_request() {
  set_has_lock_request();
  if (lock_request_ == NULL) lock_request_ = new ::floyd::CmdRequest_LockRequest;
  return lock_request_;
}
inline ::floyd::CmdRequest_LockRequest* CmdRequest::release_lock_request() {
  clear_has_lock_request();
  ::floyd::CmdRequest_LockRequest* temp = lock_request_;
  lock_request_ = NULL;
  return temp;
}
inline void CmdRequest::set_allocated_lock_request(::floyd::CmdRequest_LockRequest* lock_request) {
  delete lock_request_;
  lock_request_ = lock_request;
  if (lock_request) {
    set_has_lock_request();
  } else {
    clear_has_lock_request();
  }
}

// optional .floyd.CmdRequest.ServerStatus server_status = 6;
inline bool CmdRequest::has_server_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CmdRequest::set_has_server_status() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CmdRequest::clear_has_server_status() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CmdRequest::clear_server_status() {
  if (server_status_ != NULL) server_status_->::floyd::CmdRequest_ServerStatus::Clear();
  clear_has_server_status();
}
inline const ::floyd::CmdRequest_ServerStatus& CmdRequest::server_status() const {
  return server_status_ != NULL ? *server_status_ : *default_instance_->server_status_;
}
inline ::floyd::CmdRequest_ServerStatus* CmdRequest::mutable_server_status() {
  set_has_server_status();
  if (server_status_ == NULL) server_status_ = new ::floyd::CmdRequest_ServerStatus;
  return server_status_;
}
inline ::floyd::CmdRequest_ServerStatus* CmdRequest::release_server_status() {
  clear_has_server_status();
  ::floyd::CmdRequest_ServerStatus* temp = server_status_;
  server_status_ = NULL;
  return temp;
}
inline void CmdRequest::set_allocated_server_status(::floyd::CmdRequest_ServerStatus* server_status) {
  delete server_status_;
  server_status_ = server_status;
  if (server_status) {
    set_has_server_status();
  } else {
    clear_has_server_status();
  }
}

// -------------------------------------------------------------------

// CmdResponse_RequestVoteResponse

// required uint64 term = 1;
inline bool CmdResponse_RequestVoteResponse::has_term() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdResponse_RequestVoteResponse::set_has_term() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdResponse_RequestVoteResponse::clear_has_term() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdResponse_RequestVoteResponse::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
  clear_has_term();
}
inline ::google::protobuf::uint64 CmdResponse_RequestVoteResponse::term() const {
  return term_;
}
inline void CmdResponse_RequestVoteResponse::set_term(::google::protobuf::uint64 value) {
  set_has_term();
  term_ = value;
}

// required bool vote_granted = 2;
inline bool CmdResponse_RequestVoteResponse::has_vote_granted() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdResponse_RequestVoteResponse::set_has_vote_granted() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdResponse_RequestVoteResponse::clear_has_vote_granted() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdResponse_RequestVoteResponse::clear_vote_granted() {
  vote_granted_ = false;
  clear_has_vote_granted();
}
inline bool CmdResponse_RequestVoteResponse::vote_granted() const {
  return vote_granted_;
}
inline void CmdResponse_RequestVoteResponse::set_vote_granted(bool value) {
  set_has_vote_granted();
  vote_granted_ = value;
}

// -------------------------------------------------------------------

// CmdResponse_AppendEntriesResponse

// required uint64 term = 1;
inline bool CmdResponse_AppendEntriesResponse::has_term() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdResponse_AppendEntriesResponse::set_has_term() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdResponse_AppendEntriesResponse::clear_has_term() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdResponse_AppendEntriesResponse::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
  clear_has_term();
}
inline ::google::protobuf::uint64 CmdResponse_AppendEntriesResponse::term() const {
  return term_;
}
inline void CmdResponse_AppendEntriesResponse::set_term(::google::protobuf::uint64 value) {
  set_has_term();
  term_ = value;
}

// required bool success = 2;
inline bool CmdResponse_AppendEntriesResponse::has_success() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdResponse_AppendEntriesResponse::set_has_success() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdResponse_AppendEntriesResponse::clear_has_success() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdResponse_AppendEntriesResponse::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool CmdResponse_AppendEntriesResponse::success() const {
  return success_;
}
inline void CmdResponse_AppendEntriesResponse::set_success(bool value) {
  set_has_success();
  success_ = value;
}

// optional uint64 last_log_index = 3;
inline bool CmdResponse_AppendEntriesResponse::has_last_log_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdResponse_AppendEntriesResponse::set_has_last_log_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdResponse_AppendEntriesResponse::clear_has_last_log_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdResponse_AppendEntriesResponse::clear_last_log_index() {
  last_log_index_ = GOOGLE_ULONGLONG(0);
  clear_has_last_log_index();
}
inline ::google::protobuf::uint64 CmdResponse_AppendEntriesResponse::last_log_index() const {
  return last_log_index_;
}
inline void CmdResponse_AppendEntriesResponse::set_last_log_index(::google::protobuf::uint64 value) {
  set_has_last_log_index();
  last_log_index_ = value;
}

// -------------------------------------------------------------------

// CmdResponse_KvResponse

// optional bytes value = 1;
inline bool CmdResponse_KvResponse::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdResponse_KvResponse::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdResponse_KvResponse::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdResponse_KvResponse::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& CmdResponse_KvResponse::value() const {
  return *value_;
}
inline void CmdResponse_KvResponse::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void CmdResponse_KvResponse::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void CmdResponse_KvResponse::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CmdResponse_KvResponse::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* CmdResponse_KvResponse::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CmdResponse_KvResponse::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CmdResponse_ServerStatus

// required uint64 term = 1;
inline bool CmdResponse_ServerStatus::has_term() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdResponse_ServerStatus::set_has_term() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdResponse_ServerStatus::clear_has_term() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdResponse_ServerStatus::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
  clear_has_term();
}
inline ::google::protobuf::uint64 CmdResponse_ServerStatus::term() const {
  return term_;
}
inline void CmdResponse_ServerStatus::set_term(::google::protobuf::uint64 value) {
  set_has_term();
  term_ = value;
}

// required uint64 commit_index = 2;
inline bool CmdResponse_ServerStatus::has_commit_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdResponse_ServerStatus::set_has_commit_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdResponse_ServerStatus::clear_has_commit_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdResponse_ServerStatus::clear_commit_index() {
  commit_index_ = GOOGLE_ULONGLONG(0);
  clear_has_commit_index();
}
inline ::google::protobuf::uint64 CmdResponse_ServerStatus::commit_index() const {
  return commit_index_;
}
inline void CmdResponse_ServerStatus::set_commit_index(::google::protobuf::uint64 value) {
  set_has_commit_index();
  commit_index_ = value;
}

// required bytes role = 3;
inline bool CmdResponse_ServerStatus::has_role() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdResponse_ServerStatus::set_has_role() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdResponse_ServerStatus::clear_has_role() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdResponse_ServerStatus::clear_role() {
  if (role_ != &::google::protobuf::internal::kEmptyString) {
    role_->clear();
  }
  clear_has_role();
}
inline const ::std::string& CmdResponse_ServerStatus::role() const {
  return *role_;
}
inline void CmdResponse_ServerStatus::set_role(const ::std::string& value) {
  set_has_role();
  if (role_ == &::google::protobuf::internal::kEmptyString) {
    role_ = new ::std::string;
  }
  role_->assign(value);
}
inline void CmdResponse_ServerStatus::set_role(const char* value) {
  set_has_role();
  if (role_ == &::google::protobuf::internal::kEmptyString) {
    role_ = new ::std::string;
  }
  role_->assign(value);
}
inline void CmdResponse_ServerStatus::set_role(const void* value, size_t size) {
  set_has_role();
  if (role_ == &::google::protobuf::internal::kEmptyString) {
    role_ = new ::std::string;
  }
  role_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CmdResponse_ServerStatus::mutable_role() {
  set_has_role();
  if (role_ == &::google::protobuf::internal::kEmptyString) {
    role_ = new ::std::string;
  }
  return role_;
}
inline ::std::string* CmdResponse_ServerStatus::release_role() {
  clear_has_role();
  if (role_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_;
    role_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CmdResponse_ServerStatus::set_allocated_role(::std::string* role) {
  if (role_ != &::google::protobuf::internal::kEmptyString) {
    delete role_;
  }
  if (role) {
    set_has_role();
    role_ = role;
  } else {
    clear_has_role();
    role_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes leader_ip = 4;
inline bool CmdResponse_ServerStatus::has_leader_ip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CmdResponse_ServerStatus::set_has_leader_ip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CmdResponse_ServerStatus::clear_has_leader_ip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CmdResponse_ServerStatus::clear_leader_ip() {
  if (leader_ip_ != &::google::protobuf::internal::kEmptyString) {
    leader_ip_->clear();
  }
  clear_has_leader_ip();
}
inline const ::std::string& CmdResponse_ServerStatus::leader_ip() const {
  return *leader_ip_;
}
inline void CmdResponse_ServerStatus::set_leader_ip(const ::std::string& value) {
  set_has_leader_ip();
  if (leader_ip_ == &::google::protobuf::internal::kEmptyString) {
    leader_ip_ = new ::std::string;
  }
  leader_ip_->assign(value);
}
inline void CmdResponse_ServerStatus::set_leader_ip(const char* value) {
  set_has_leader_ip();
  if (leader_ip_ == &::google::protobuf::internal::kEmptyString) {
    leader_ip_ = new ::std::string;
  }
  leader_ip_->assign(value);
}
inline void CmdResponse_ServerStatus::set_leader_ip(const void* value, size_t size) {
  set_has_leader_ip();
  if (leader_ip_ == &::google::protobuf::internal::kEmptyString) {
    leader_ip_ = new ::std::string;
  }
  leader_ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CmdResponse_ServerStatus::mutable_leader_ip() {
  set_has_leader_ip();
  if (leader_ip_ == &::google::protobuf::internal::kEmptyString) {
    leader_ip_ = new ::std::string;
  }
  return leader_ip_;
}
inline ::std::string* CmdResponse_ServerStatus::release_leader_ip() {
  clear_has_leader_ip();
  if (leader_ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = leader_ip_;
    leader_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CmdResponse_ServerStatus::set_allocated_leader_ip(::std::string* leader_ip) {
  if (leader_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete leader_ip_;
  }
  if (leader_ip) {
    set_has_leader_ip();
    leader_ip_ = leader_ip;
  } else {
    clear_has_leader_ip();
    leader_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 leader_port = 5;
inline bool CmdResponse_ServerStatus::has_leader_port() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CmdResponse_ServerStatus::set_has_leader_port() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CmdResponse_ServerStatus::clear_has_leader_port() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CmdResponse_ServerStatus::clear_leader_port() {
  leader_port_ = 0;
  clear_has_leader_port();
}
inline ::google::protobuf::int32 CmdResponse_ServerStatus::leader_port() const {
  return leader_port_;
}
inline void CmdResponse_ServerStatus::set_leader_port(::google::protobuf::int32 value) {
  set_has_leader_port();
  leader_port_ = value;
}

// optional bytes voted_for_ip = 6;
inline bool CmdResponse_ServerStatus::has_voted_for_ip() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CmdResponse_ServerStatus::set_has_voted_for_ip() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CmdResponse_ServerStatus::clear_has_voted_for_ip() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CmdResponse_ServerStatus::clear_voted_for_ip() {
  if (voted_for_ip_ != &::google::protobuf::internal::kEmptyString) {
    voted_for_ip_->clear();
  }
  clear_has_voted_for_ip();
}
inline const ::std::string& CmdResponse_ServerStatus::voted_for_ip() const {
  return *voted_for_ip_;
}
inline void CmdResponse_ServerStatus::set_voted_for_ip(const ::std::string& value) {
  set_has_voted_for_ip();
  if (voted_for_ip_ == &::google::protobuf::internal::kEmptyString) {
    voted_for_ip_ = new ::std::string;
  }
  voted_for_ip_->assign(value);
}
inline void CmdResponse_ServerStatus::set_voted_for_ip(const char* value) {
  set_has_voted_for_ip();
  if (voted_for_ip_ == &::google::protobuf::internal::kEmptyString) {
    voted_for_ip_ = new ::std::string;
  }
  voted_for_ip_->assign(value);
}
inline void CmdResponse_ServerStatus::set_voted_for_ip(const void* value, size_t size) {
  set_has_voted_for_ip();
  if (voted_for_ip_ == &::google::protobuf::internal::kEmptyString) {
    voted_for_ip_ = new ::std::string;
  }
  voted_for_ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CmdResponse_ServerStatus::mutable_voted_for_ip() {
  set_has_voted_for_ip();
  if (voted_for_ip_ == &::google::protobuf::internal::kEmptyString) {
    voted_for_ip_ = new ::std::string;
  }
  return voted_for_ip_;
}
inline ::std::string* CmdResponse_ServerStatus::release_voted_for_ip() {
  clear_has_voted_for_ip();
  if (voted_for_ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = voted_for_ip_;
    voted_for_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CmdResponse_ServerStatus::set_allocated_voted_for_ip(::std::string* voted_for_ip) {
  if (voted_for_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete voted_for_ip_;
  }
  if (voted_for_ip) {
    set_has_voted_for_ip();
    voted_for_ip_ = voted_for_ip;
  } else {
    clear_has_voted_for_ip();
    voted_for_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 voted_for_port = 7;
inline bool CmdResponse_ServerStatus::has_voted_for_port() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CmdResponse_ServerStatus::set_has_voted_for_port() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CmdResponse_ServerStatus::clear_has_voted_for_port() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CmdResponse_ServerStatus::clear_voted_for_port() {
  voted_for_port_ = 0;
  clear_has_voted_for_port();
}
inline ::google::protobuf::int32 CmdResponse_ServerStatus::voted_for_port() const {
  return voted_for_port_;
}
inline void CmdResponse_ServerStatus::set_voted_for_port(::google::protobuf::int32 value) {
  set_has_voted_for_port();
  voted_for_port_ = value;
}

// optional uint64 last_log_term = 8;
inline bool CmdResponse_ServerStatus::has_last_log_term() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CmdResponse_ServerStatus::set_has_last_log_term() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CmdResponse_ServerStatus::clear_has_last_log_term() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CmdResponse_ServerStatus::clear_last_log_term() {
  last_log_term_ = GOOGLE_ULONGLONG(0);
  clear_has_last_log_term();
}
inline ::google::protobuf::uint64 CmdResponse_ServerStatus::last_log_term() const {
  return last_log_term_;
}
inline void CmdResponse_ServerStatus::set_last_log_term(::google::protobuf::uint64 value) {
  set_has_last_log_term();
  last_log_term_ = value;
}

// optional uint64 last_log_index = 9;
inline bool CmdResponse_ServerStatus::has_last_log_index() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CmdResponse_ServerStatus::set_has_last_log_index() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CmdResponse_ServerStatus::clear_has_last_log_index() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CmdResponse_ServerStatus::clear_last_log_index() {
  last_log_index_ = GOOGLE_ULONGLONG(0);
  clear_has_last_log_index();
}
inline ::google::protobuf::uint64 CmdResponse_ServerStatus::last_log_index() const {
  return last_log_index_;
}
inline void CmdResponse_ServerStatus::set_last_log_index(::google::protobuf::uint64 value) {
  set_has_last_log_index();
  last_log_index_ = value;
}

// optional uint64 last_applied = 10;
inline bool CmdResponse_ServerStatus::has_last_applied() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CmdResponse_ServerStatus::set_has_last_applied() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CmdResponse_ServerStatus::clear_has_last_applied() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CmdResponse_ServerStatus::clear_last_applied() {
  last_applied_ = GOOGLE_ULONGLONG(0);
  clear_has_last_applied();
}
inline ::google::protobuf::uint64 CmdResponse_ServerStatus::last_applied() const {
  return last_applied_;
}
inline void CmdResponse_ServerStatus::set_last_applied(::google::protobuf::uint64 value) {
  set_has_last_applied();
  last_applied_ = value;
}

// -------------------------------------------------------------------

// CmdResponse

// required .floyd.Type type = 1;
inline bool CmdResponse::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdResponse::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdResponse::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdResponse::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::floyd::Type CmdResponse::type() const {
  return static_cast< ::floyd::Type >(type_);
}
inline void CmdResponse::set_type(::floyd::Type value) {
  assert(::floyd::Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .floyd.StatusCode code = 2;
inline bool CmdResponse::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdResponse::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdResponse::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdResponse::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::floyd::StatusCode CmdResponse::code() const {
  return static_cast< ::floyd::StatusCode >(code_);
}
inline void CmdResponse::set_code(::floyd::StatusCode value) {
  assert(::floyd::StatusCode_IsValid(value));
  set_has_code();
  code_ = value;
}

// optional .floyd.CmdResponse.RequestVoteResponse request_vote_res = 3;
inline bool CmdResponse::has_request_vote_res() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdResponse::set_has_request_vote_res() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdResponse::clear_has_request_vote_res() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdResponse::clear_request_vote_res() {
  if (request_vote_res_ != NULL) request_vote_res_->::floyd::CmdResponse_RequestVoteResponse::Clear();
  clear_has_request_vote_res();
}
inline const ::floyd::CmdResponse_RequestVoteResponse& CmdResponse::request_vote_res() const {
  return request_vote_res_ != NULL ? *request_vote_res_ : *default_instance_->request_vote_res_;
}
inline ::floyd::CmdResponse_RequestVoteResponse* CmdResponse::mutable_request_vote_res() {
  set_has_request_vote_res();
  if (request_vote_res_ == NULL) request_vote_res_ = new ::floyd::CmdResponse_RequestVoteResponse;
  return request_vote_res_;
}
inline ::floyd::CmdResponse_RequestVoteResponse* CmdResponse::release_request_vote_res() {
  clear_has_request_vote_res();
  ::floyd::CmdResponse_RequestVoteResponse* temp = request_vote_res_;
  request_vote_res_ = NULL;
  return temp;
}
inline void CmdResponse::set_allocated_request_vote_res(::floyd::CmdResponse_RequestVoteResponse* request_vote_res) {
  delete request_vote_res_;
  request_vote_res_ = request_vote_res;
  if (request_vote_res) {
    set_has_request_vote_res();
  } else {
    clear_has_request_vote_res();
  }
}

// optional .floyd.CmdResponse.AppendEntriesResponse append_entries_res = 4;
inline bool CmdResponse::has_append_entries_res() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CmdResponse::set_has_append_entries_res() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CmdResponse::clear_has_append_entries_res() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CmdResponse::clear_append_entries_res() {
  if (append_entries_res_ != NULL) append_entries_res_->::floyd::CmdResponse_AppendEntriesResponse::Clear();
  clear_has_append_entries_res();
}
inline const ::floyd::CmdResponse_AppendEntriesResponse& CmdResponse::append_entries_res() const {
  return append_entries_res_ != NULL ? *append_entries_res_ : *default_instance_->append_entries_res_;
}
inline ::floyd::CmdResponse_AppendEntriesResponse* CmdResponse::mutable_append_entries_res() {
  set_has_append_entries_res();
  if (append_entries_res_ == NULL) append_entries_res_ = new ::floyd::CmdResponse_AppendEntriesResponse;
  return append_entries_res_;
}
inline ::floyd::CmdResponse_AppendEntriesResponse* CmdResponse::release_append_entries_res() {
  clear_has_append_entries_res();
  ::floyd::CmdResponse_AppendEntriesResponse* temp = append_entries_res_;
  append_entries_res_ = NULL;
  return temp;
}
inline void CmdResponse::set_allocated_append_entries_res(::floyd::CmdResponse_AppendEntriesResponse* append_entries_res) {
  delete append_entries_res_;
  append_entries_res_ = append_entries_res;
  if (append_entries_res) {
    set_has_append_entries_res();
  } else {
    clear_has_append_entries_res();
  }
}

// optional bytes msg = 5;
inline bool CmdResponse::has_msg() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CmdResponse::set_has_msg() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CmdResponse::clear_has_msg() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CmdResponse::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& CmdResponse::msg() const {
  return *msg_;
}
inline void CmdResponse::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void CmdResponse::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void CmdResponse::set_msg(const void* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CmdResponse::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* CmdResponse::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CmdResponse::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .floyd.CmdResponse.KvResponse kv_response = 6;
inline bool CmdResponse::has_kv_response() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CmdResponse::set_has_kv_response() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CmdResponse::clear_has_kv_response() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CmdResponse::clear_kv_response() {
  if (kv_response_ != NULL) kv_response_->::floyd::CmdResponse_KvResponse::Clear();
  clear_has_kv_response();
}
inline const ::floyd::CmdResponse_KvResponse& CmdResponse::kv_response() const {
  return kv_response_ != NULL ? *kv_response_ : *default_instance_->kv_response_;
}
inline ::floyd::CmdResponse_KvResponse* CmdResponse::mutable_kv_response() {
  set_has_kv_response();
  if (kv_response_ == NULL) kv_response_ = new ::floyd::CmdResponse_KvResponse;
  return kv_response_;
}
inline ::floyd::CmdResponse_KvResponse* CmdResponse::release_kv_response() {
  clear_has_kv_response();
  ::floyd::CmdResponse_KvResponse* temp = kv_response_;
  kv_response_ = NULL;
  return temp;
}
inline void CmdResponse::set_allocated_kv_response(::floyd::CmdResponse_KvResponse* kv_response) {
  delete kv_response_;
  kv_response_ = kv_response;
  if (kv_response) {
    set_has_kv_response();
  } else {
    clear_has_kv_response();
  }
}

// optional .floyd.CmdResponse.ServerStatus server_status = 7;
inline bool CmdResponse::has_server_status() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CmdResponse::set_has_server_status() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CmdResponse::clear_has_server_status() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CmdResponse::clear_server_status() {
  if (server_status_ != NULL) server_status_->::floyd::CmdResponse_ServerStatus::Clear();
  clear_has_server_status();
}
inline const ::floyd::CmdResponse_ServerStatus& CmdResponse::server_status() const {
  return server_status_ != NULL ? *server_status_ : *default_instance_->server_status_;
}
inline ::floyd::CmdResponse_ServerStatus* CmdResponse::mutable_server_status() {
  set_has_server_status();
  if (server_status_ == NULL) server_status_ = new ::floyd::CmdResponse_ServerStatus;
  return server_status_;
}
inline ::floyd::CmdResponse_ServerStatus* CmdResponse::release_server_status() {
  clear_has_server_status();
  ::floyd::CmdResponse_ServerStatus* temp = server_status_;
  server_status_ = NULL;
  return temp;
}
inline void CmdResponse::set_allocated_server_status(::floyd::CmdResponse_ServerStatus* server_status) {
  delete server_status_;
  server_status_ = server_status;
  if (server_status) {
    set_has_server_status();
  } else {
    clear_has_server_status();
  }
}

// -------------------------------------------------------------------

// Lock

// required bytes holder = 1;
inline bool Lock::has_holder() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Lock::set_has_holder() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Lock::clear_has_holder() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Lock::clear_holder() {
  if (holder_ != &::google::protobuf::internal::kEmptyString) {
    holder_->clear();
  }
  clear_has_holder();
}
inline const ::std::string& Lock::holder() const {
  return *holder_;
}
inline void Lock::set_holder(const ::std::string& value) {
  set_has_holder();
  if (holder_ == &::google::protobuf::internal::kEmptyString) {
    holder_ = new ::std::string;
  }
  holder_->assign(value);
}
inline void Lock::set_holder(const char* value) {
  set_has_holder();
  if (holder_ == &::google::protobuf::internal::kEmptyString) {
    holder_ = new ::std::string;
  }
  holder_->assign(value);
}
inline void Lock::set_holder(const void* value, size_t size) {
  set_has_holder();
  if (holder_ == &::google::protobuf::internal::kEmptyString) {
    holder_ = new ::std::string;
  }
  holder_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Lock::mutable_holder() {
  set_has_holder();
  if (holder_ == &::google::protobuf::internal::kEmptyString) {
    holder_ = new ::std::string;
  }
  return holder_;
}
inline ::std::string* Lock::release_holder() {
  clear_has_holder();
  if (holder_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = holder_;
    holder_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Lock::set_allocated_holder(::std::string* holder) {
  if (holder_ != &::google::protobuf::internal::kEmptyString) {
    delete holder_;
  }
  if (holder) {
    set_has_holder();
    holder_ = holder;
  } else {
    clear_has_holder();
    holder_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint64 lease_end = 2;
inline bool Lock::has_lease_end() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Lock::set_has_lease_end() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Lock::clear_has_lease_end() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Lock::clear_lease_end() {
  lease_end_ = GOOGLE_ULONGLONG(0);
  clear_has_lease_end();
}
inline ::google::protobuf::uint64 Lock::lease_end() const {
  return lease_end_;
}
inline void Lock::set_lease_end(::google::protobuf::uint64 value) {
  set_has_lease_end();
  lease_end_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace floyd

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::floyd::Entry_OpType>() {
  return ::floyd::Entry_OpType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::floyd::Type>() {
  return ::floyd::Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::floyd::StatusCode>() {
  return ::floyd::StatusCode_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_floyd_2eproto__INCLUDED
